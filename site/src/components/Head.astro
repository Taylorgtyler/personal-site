---
import "../styles/global.css";
import "@fontsource/montserrat/400.css";
import "@fontsource/montserrat/600.css";
import "@fontsource/sora/400.css";
import "@fontsource/sora/600.css";
import { ViewTransitions } from "astro:transitions";
interface Props {
	title: string;
	description: string;
	image?: string;
}

const canonicalURL = new URL(Astro.url.pathname, Astro.site);
const { title, description, image = "/nano.png" } = Astro.props;
---

<!-- Global Metadata -->
<meta charset="utf-8" />
<meta name="viewport" content="width=device-width,initial-scale=1" />
<meta name="generator" content={Astro.generator} />

<!-- Canonical URL -->
<link rel="canonical" href={canonicalURL} />

<!-- Primary Meta Tags -->
<title>{title}</title>
<meta name="title" content={title} />
<meta name="description" content={description} />

<!--Tracking Code -->

<!-- Open Graph / Facebook -->
<meta property="og:type" content="website" />
<meta property="og:url" content={Astro.url} />
<meta property="og:title" content={title} />
<meta property="og:description" content={description} />
<meta property="og:image" content={new URL(image, Astro.url)} />

<!-- Twitter -->
<meta property="twitter:card" content="summary_large_image" />
<meta property="twitter:url" content={Astro.url} />
<meta property="twitter:title" content={title} />
<meta property="twitter:description" content={description} />
<meta property="twitter:image" content={new URL(image, Astro.url)} />

<ViewTransitions />

<script>
	import type { TransitionBeforeSwapEvent } from "astro:transitions/client";
	document.addEventListener("astro:before-swap", (e) =>
		[
			...(e as TransitionBeforeSwapEvent).newDocument.head.querySelectorAll(
				'link[as="font"]'
			),
		].forEach((link) => link.remove())
	);
</script>

<script is:inline>
	function init() {
		onScroll();
		animate();

		const backToTop = document.getElementById("back-to-top");
		backToTop?.addEventListener("click", (event) => scrollToTop(event));

		const backToPrev = document.getElementById("back-to-prev");
		backToPrev?.addEventListener("click", () => window.history.back());

		window
			.matchMedia("(prefers-color-scheme: dark)")
			.addEventListener("change", (event) => {
				if (localStorage.theme === "system") {
					toggleTheme(event.matches);
				}
			});

		document.addEventListener("scroll", onScroll);
	}

	function animate() {
		const animateElements = document.querySelectorAll(".animate");

		animateElements.forEach((element, index) => {
			setTimeout(() => {
				element.classList.add("show");
			}, index * 150);
		});
	}

	function onScroll() {
		if (window.scrollY > 0) {
			document.documentElement.classList.add("scrolled");
		} else {
			document.documentElement.classList.remove("scrolled");
		}
	}

	function scrollToTop(event) {
		event.preventDefault();
		window.scrollTo({
			top: 0,
			behavior: "smooth",
		});
	}

	document.addEventListener("DOMContentLoaded", () => init());
	document.addEventListener("astro:after-swap", () => init());
</script>

<script
	defer
	src="https://cloud.umami.is/script.js"
	data-website-id="835826a4-61b2-40b5-bc86-c7ad145416cc"></script>
